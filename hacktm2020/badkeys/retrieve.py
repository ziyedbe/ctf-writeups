import fractions #for gcd function (or easily implementable to avoid import)
import random #for random elements drawing in RecoverPrimeFactors

def failFunction():
    print("Prime factors not found")

def outputPrimes(a, n):
    p = fractions.gcd(a, n)
    q = int(n / p)
    if p > q:
        p, q = q, p
    print("{0}".format(str(q)))
    return p,q


def RecoverPrimeFactors(n, e, d):
    """The following algorithm recovers the prime factor
        s of a modulus, given the public and private
        exponents.
        Function call: RecoverPrimeFactors(n, e, d)
        Input:  n: modulus
                e: public exponent
                d: private exponent
        Output: (p, q): prime factors of modulus"""
    
    k = d * e - 1
    if k % 2 == 1:
        failFunction()
        return 0, 0
    else:
        t = 0
        r = k
        while(r % 2 == 0):
            r = int(r / 2)
            t += 1
        for i in range(1, 101):
            g = random.randint(0, n) # random g in [0, n-1]
            y = pow(g, r, n)
            if y == 1 or y == n - 1:
                continue
            else:
                for j in range(1, t): # j \in [1, t-1]
                    x = pow(y, 2, n)
                    if x == 1:
                        p, q = outputPrimes(y - 1, n)
                        return p, q
                    elif x == n - 1:
                        continue
                    y = x
                    x = pow(y, 2, n)
                    if  x == 1:
                        p, q = outputPrimes(y - 1, n)
                        return p, q


e=65537

n = [74960926882891606243801071654764041251495274459302545562358965457314424183873525044484950824670696857619017818666431558365368135472653546942207668665792571575045259153083315349885356712130065505318196554037279729273897089146834993884901767778282034623990307251784887409634445231319388643985049561540796633497,
63721163660294466602311607792999276801390178591956192045211454207365782919598395759973520045497030002279340806763252696019181713617112165528194875995463946066774925430386039506344859886705220968818874790814130307390472297807088775324044856442372421724158971373927388188083976120111260540761053482114818072797,
134569071087801731246974997739854451111923632550101561318483190060627405680845064112709085273486463297209345801338095228334472765175547672496306888665981889709262311601986804557617521053497882593825206790703707749977447695066535467435339572510809409290897436721181056153151099204988224242773465644526892875223,
144986765051308968598060542767452042123110904239133777568669652487632939791065346002516293714891079867612705458507716874233439377225471083595342864552589510086533608741979486051684655734944738853226741896348557528130967994885889033714475235465036745753400476189194547524078377425172108005721116288045606842659,
19516036513388789537167589979718276058778153675985397873404315659921078948300623776311046983229721569918397758972319844148828605522324291019208128839623587992867230756984765890224157953800962544228228139791007709885278824239351234925581279062641544026713294531163947598247314569008982183149647886272514649057,
112310059620493535103310683440871463364522845417369406364621975036336825590911459051804530124181331359610735595757665923982782543884336347597598354976749365743855690937450937989274923966258336141221473765277236199881745272419037337502448095204691967237971618385173961376383176169373211485392446612547440845301,
70151002325644685135442426355170628788671449891415218182869104885609385394561490069396218717610301249109064093095619960553677309727144116682586833409366478546848467402793775130193632578290997653966529535038363752232675724799608020594886066088223019982059745647106901761750386900077566723996634631567983229791,
136880741134370698504773195167180734814213273428368342008892707384710523667874483781269765780248991474297689611612638149953096798081466186154573419780729415356278303883850300811896691971830824063085021047332624289389677086896609942143108935723593343961102014895900609459791488149842263084418119578683300673413,
76105935668258411258538254826719098662196109172324562822079373768124481724732298974603770656282108468360158239959153746289404342932684638810696884093830851944761966687518803867773677183493064652205834374310992297775417746027204271869031937256116851597261863442083553291326648970053439912539050368720570279203
,106723955405291948209897565312286897462911193458015560639521270758487759814435505978553906868270593337572274643246369748258469563719176337461962115079758645765472389380415830304206669639838513533529186591327909093879778994212643053783417922071868608868045504235349645531501933001220491896729856249403874730829
,52701406634157962357142197918286496128617616524792917616440352970494157689628702854000765060315011339162100945900734701065734957300265017227114339088385730021993825213768493756646697869030648950782498617075667862579342119183842366697622601030097605210245271508560340879484236257216034127593808148944154383921]
d = [11408216499534017130409873639083518431457251132292958015151262973148817718387392446918426225266117314767109933676838859928531696342588865483644037524949493054726711554221608852652327923669102534359021106071065151621652894773992142334679445139105057196360771515803391394679021682960563620611866629287729776793,
25406987314145516376779599664904772908389562488157945196353518011088015525154121787751469434195689320377213705563735846921238954461277720942631800427811280965143946948386332798146492065775556353691807493736277593495252327608047809947481962049465586616104111480671509822944786336265237970271648249455151809153,
30592559777486885177055411314617566674039858421410244016114272070941418088086281187958750957316856381358958192992298713809837339645551135580244386136601672776916785963637664952859578737137141795467584556714513138405633165895709870988411551284377122030603192898581631950174252761650096937805427973584207289209,
25580694329741758150348262142302027298618053705801362131719901608473071437570969007234019015598601652642106187599748694886266681704352078056867869185675148796310046590942974333329656450687745469820232361331790875651371072190756989880771412772676568295843350989478151692120261587969272577065030401215675786769,
2667869617520639722042272893606604440401505695761984520924504691963821143748192447197318612734105551747851221792773753509152928527007695244534928761984643817029485019101253927696136492035103283417039842139946510393474860614630099352320844385478513063479968598438123053386481817224108466983684810307919295233,
41327332618335018272905998777180160985379754033374744097063087263321465522535678265610541350302226026036780744118465468708802414335637202781080640380537516037273330901157463867034944349495244582237926345856906042770471076385274039737742167769249659230007936248593569728183549786847108791404549607057230313969,
26911002173871752277189344049854964041320001246930283661679847504907236495486067745467298392960321401709736185124692638178128404471521892023084907437705146511899303932678411655092144739834848681059582344285616513914931975072830848692494579891847567248174375783654639575689762905379704819792705886208794130185,
64934651294193890726053963985956773202525148708179680990226502168098176310087701615265834843034333963042482414895965944154321672526249045997614898774476658917813904484927920568024931115483277799651611576212428722538503738097995306564118218534016271883085167598657933222367561233640047099988749312145030067673,
25595479318004846766703414477863125465209949223602021593320589548243460971585891964832716008287134790288329459190071375283652915491696326106269283340893318311767001434335280044481576925302156906481931630473349555994562526760655716406496702973076031851114808957456807908057371315523104603313515126483800169257
, 26408630007592955492621096734201391826846374175025380272077093060262080975795361405835004771087236403183080975472273344942667514760118447054650649560529862810904003213764826559108866703869762586663489380790259226967806499344257624846212141891562986722183548806328762859334230025514335233390460885603300311389
, 1726504418016344128977284571014253127060164833280900775477935179023314411090419534423907755687570827855730819702593609765294916662704563711897317332541375513113517619724581215192293380258352456822163509804697782497189712614379463389436109195385242297377606581396068243597323553182032843424101247594124749137]
for i in range(len(n)):
    RecoverPrimeFactors(n[i], e, d[i])